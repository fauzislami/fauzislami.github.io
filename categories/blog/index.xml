<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Blog · Muhammad Fauzi Islami</title>
    <link>https://fauzislami.github.io/categories/blog/</link>
    <description>Recent content in Blog on Blog · Muhammad Fauzi Islami</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 18 Feb 2022 04:57:55 +0000</lastBuildDate><atom:link href="https://fauzislami.github.io/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JCasC (Jenkins Configuration as Code) : Setting up Jenkins in a fully reproducible way</title>
      <link>https://fauzislami.github.io/blog/2022/02/18/jcasc-jenkins-configuration-as-code-setting-up-jenkins-in-a-fully-reproducible-way/</link>
      <pubDate>Fri, 18 Feb 2022 04:57:55 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2022/02/18/jcasc-jenkins-configuration-as-code-setting-up-jenkins-in-a-fully-reproducible-way/</guid>
      <description>&lt;p&gt;Never thought that the ‘as code’ paradigm would spread out to the Infrastructure area. It works like magic while writing code to define what our infrastructure will be. It does make sense considering virtualization has been implemented everywhere these days. Knowing that virtualization itself consists of thousands of lines of codes (my assumption), it’s clearly possible to have an approach to codify every part of the infrastructure in order to build it. That’s how the brief of the emergence of &lt;strong&gt;Infrastructure as Code (IaC)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Actually, the ‘as code’ paradigm doesn’t only apply on the high-level point of view like Infrastructure, it also even applies to specific tools like Jenkins. It’s called &lt;strong&gt;JCasC (Jenkins Configuration as Code)&lt;/strong&gt;. JCasC means enabling us to reproduce and/or restore a full environment based on recipes and automation which is managed by code. Setting up Jenkins is a quite long and complex process if we do it manually. As both Jenkins and its plugins require some tuning and configuration with dozens of parameters to set within the web UI manage section. JCasC provides the ability to define this whole configuration in a simple and human-friendly yaml syntax. Without any manual steps, this configuration can be validated and applied to Jenkins in a fully reproducible way.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Immutable Infrastructure, treating servers like “cattle”. Does it sound ridiculous ?</title>
      <link>https://fauzislami.github.io/blog/2022/02/06/immutable-infrastructure-treating-servers-like-cattle-does-it-sound-ridiculous/</link>
      <pubDate>Sun, 06 Feb 2022 09:50:38 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2022/02/06/immutable-infrastructure-treating-servers-like-cattle-does-it-sound-ridiculous/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;h2 id=&#34;chattering&#34;&gt;Chattering&lt;/h2&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Highly Available Kubernetes Cluster Using HAproxy and Keepalived</title>
      <link>https://fauzislami.github.io/blog/2021/10/17/highly-available-kubernetes-cluster-with-haproxy-and-keepalived/</link>
      <pubDate>Sun, 17 Oct 2021 10:16:47 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/10/17/highly-available-kubernetes-cluster-with-haproxy-and-keepalived/</guid>
      <description>Kubernetes provides us a convenient way to make our application easier to maintain and more scalable. Since kubernetes is only an abstraction that runs on a set of machines and consists of many components, we have some work to do to keep our kubernetes cluster well-established and healthy, especially to make that cluster highly available. In this case, I use two HAproxy instances to balance the load over the network or we usually say that as load balancing.</description>
    </item>
    
    <item>
      <title>Proxying Docker Registry Through Nexus Repository Manager</title>
      <link>https://fauzislami.github.io/blog/2021/10/14/proxying-docker-registry-through-nexus-repository-manager/</link>
      <pubDate>Thu, 14 Oct 2021 06:18:27 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/10/14/proxying-docker-registry-through-nexus-repository-manager/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In this &lt;!-- raw HTML omitted --&gt;post&lt;!-- raw HTML omitted --&gt; we’ve learned how to proxy PyPI and make it cached in our local repo, but for this time I want to share similar thing but it’s for docker image. Here we go!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Proxying PyPI Repository in Nexus Repository Manager</title>
      <link>https://fauzislami.github.io/blog/2021/10/08/proxying-pypi-repository-in-nexus-repository-manager/</link>
      <pubDate>Fri, 08 Oct 2021 04:29:58 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/10/08/proxying-pypi-repository-in-nexus-repository-manager/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Service Mesh : Istio and Kiali Setup</title>
      <link>https://fauzislami.github.io/blog/2021/08/01/service-mesh-istio-and-kiali-setup/</link>
      <pubDate>Sun, 01 Aug 2021 12:18:13 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/08/01/service-mesh-istio-and-kiali-setup/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>CI/CD Labs Part 3: Integrate Jenkins with Openshift</title>
      <link>https://fauzislami.github.io/blog/2021/03/26/ci-cd-labs-part-3-integrate-jenkins-with-openshift/</link>
      <pubDate>Fri, 26 Mar 2021 09:34:00 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/03/26/ci-cd-labs-part-3-integrate-jenkins-with-openshift/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>CI/CD Labs Part 2: Integrate Jenkins with Bitbucket Server</title>
      <link>https://fauzislami.github.io/blog/2021/03/05/ci-cd-labs-part-2-integrate-jenkins-with-bitbucket-server/</link>
      <pubDate>Fri, 05 Mar 2021 09:18:00 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/03/05/ci-cd-labs-part-2-integrate-jenkins-with-bitbucket-server/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://fauzislami.github.io/images/ci-cd-labs-part2/1.png&#34; alt=&#34;CI/CD Part 2&#34; title=&#34;CI/CD Part 2&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CI/CD Labs Part 1: Integrate Jenkins with Nexus Repository OSS</title>
      <link>https://fauzislami.github.io/blog/2021/03/03/ci-cd-labs-part-1-integrate-jenkins-with-nexus-repository-oss/</link>
      <pubDate>Wed, 03 Mar 2021 04:02:00 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/03/03/ci-cd-labs-part-1-integrate-jenkins-with-nexus-repository-oss/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://fauzislami.github.io/images/ci-cd-labs-part1/1.png&#34; alt=&#34;CI/CD Part 1&#34; title=&#34;CI/CD Part 1&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Automating K8S Cluster Installation with Kubespray</title>
      <link>https://fauzislami.github.io/blog/2021/01/18/automating-k8s-cluster-installation-with-kubespray/</link>
      <pubDate>Mon, 18 Jan 2021 17:20:00 +0000</pubDate>
      
      <guid>https://fauzislami.github.io/blog/2021/01/18/automating-k8s-cluster-installation-with-kubespray/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://fauzislami.github.io/images/automating-k8s-cluster-kubespray/pic-1.png&#34; alt=&#34;kubespray&#34; title=&#34;kubespray&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are various ways to perform a kubernetes installation. If you look at the environment in which kubernetes will be installed on, you have options that can be done, namely:&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
